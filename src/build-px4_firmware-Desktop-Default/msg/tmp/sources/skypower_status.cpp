/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file skypower_status.msg */


#include <inttypes.h>
#include <px4_log.h>
#include <px4_defines.h>
#include <uORB/topics/skypower_status.h>
#include <drivers/drv_hrt.h>
#include <lib/drivers/device/Device.hpp>

constexpr char __orb_skypower_status_fields[] = "uint64_t timestamp;uint32_t rev_counter;float operating_time_s;uint16_t engine_speed;uint16_t engine_target_load;uint16_t engine_current_load;uint16_t engine_current_torque;uint16_t engine_current_power;uint16_t maximum_load;uint16_t injection_fuel_flow;uint16_t specific_fuel_consumption;uint16_t injection_valve_load;uint16_t red_factor;int16_t engine_temp_1;int16_t engine_temp_2;int16_t exhaust_temp_1;int16_t exhaust_temp_2;int16_t msl_engine_temp_1;int16_t msl_engine_temp_2;int16_t msl_exhaust_temp_1;int16_t msl_exhaust_temp_2;int16_t air_temp;int16_t ecu_temp;uint16_t current_altitude;uint16_t isa_altitude;uint16_t density_altitude;uint16_t pressure_altitude;uint16_t ambient_pressure_hpa;uint16_t sfc_map;uint16_t fuel_flow_icao;uint16_t torque_icao;uint16_t power_icao;int16_t ignition_angle;uint16_t throttle_angle;int16_t ignition_gap;uint16_t injection_angle;uint16_t injection_time;uint16_t sensor_error_flags;uint16_t thermal_limit_flags;uint16_t eng_supply_voltage;int16_t gen_motor_speed;int16_t gen_current_output;int16_t gen_phase_current;uint16_t gen_supply_voltage;uint16_t gen_bridge_voltage;int16_t gen_battery_current;int16_t gen_temp;int16_t gen_controller_temp;uint8_t[6] _padding0;";

ORB_DEFINE(skypower_status, struct skypower_status_s, 106, __orb_skypower_status_fields);


void print_message(const skypower_status_s& message)
{

	PX4_INFO_RAW(" skypower_status_s\n");
	if (message.timestamp != 0) {
		PX4_INFO_RAW("\ttimestamp: %" PRIu64 "  (%.6f seconds ago)\n", message.timestamp, hrt_elapsed_time(&message.timestamp) / 1e6);
	} else {
		PX4_INFO_RAW("\n");
	}
	PX4_INFO_RAW("\trev_counter: %" PRIu32 "\n", message.rev_counter);
	PX4_INFO_RAW("\toperating_time_s: %.4f\n", (double)message.operating_time_s);
	PX4_INFO_RAW("\tengine_speed: %u\n", message.engine_speed);
	PX4_INFO_RAW("\tengine_target_load: %u\n", message.engine_target_load);
	PX4_INFO_RAW("\tengine_current_load: %u\n", message.engine_current_load);
	PX4_INFO_RAW("\tengine_current_torque: %u\n", message.engine_current_torque);
	PX4_INFO_RAW("\tengine_current_power: %u\n", message.engine_current_power);
	PX4_INFO_RAW("\tmaximum_load: %u\n", message.maximum_load);
	PX4_INFO_RAW("\tinjection_fuel_flow: %u\n", message.injection_fuel_flow);
	PX4_INFO_RAW("\tspecific_fuel_consumption: %u\n", message.specific_fuel_consumption);
	PX4_INFO_RAW("\tinjection_valve_load: %u\n", message.injection_valve_load);
	PX4_INFO_RAW("\tred_factor: %u\n", message.red_factor);
	PX4_INFO_RAW("\tengine_temp_1: %d\n", message.engine_temp_1);
	PX4_INFO_RAW("\tengine_temp_2: %d\n", message.engine_temp_2);
	PX4_INFO_RAW("\texhaust_temp_1: %d\n", message.exhaust_temp_1);
	PX4_INFO_RAW("\texhaust_temp_2: %d\n", message.exhaust_temp_2);
	PX4_INFO_RAW("\tmsl_engine_temp_1: %d\n", message.msl_engine_temp_1);
	PX4_INFO_RAW("\tmsl_engine_temp_2: %d\n", message.msl_engine_temp_2);
	PX4_INFO_RAW("\tmsl_exhaust_temp_1: %d\n", message.msl_exhaust_temp_1);
	PX4_INFO_RAW("\tmsl_exhaust_temp_2: %d\n", message.msl_exhaust_temp_2);
	PX4_INFO_RAW("\tair_temp: %d\n", message.air_temp);
	PX4_INFO_RAW("\tecu_temp: %d\n", message.ecu_temp);
	PX4_INFO_RAW("\tcurrent_altitude: %u\n", message.current_altitude);
	PX4_INFO_RAW("\tisa_altitude: %u\n", message.isa_altitude);
	PX4_INFO_RAW("\tdensity_altitude: %u\n", message.density_altitude);
	PX4_INFO_RAW("\tpressure_altitude: %u\n", message.pressure_altitude);
	PX4_INFO_RAW("\tambient_pressure_hpa: %u\n", message.ambient_pressure_hpa);
	PX4_INFO_RAW("\tsfc_map: %u\n", message.sfc_map);
	PX4_INFO_RAW("\tfuel_flow_icao: %u\n", message.fuel_flow_icao);
	PX4_INFO_RAW("\ttorque_icao: %u\n", message.torque_icao);
	PX4_INFO_RAW("\tpower_icao: %u\n", message.power_icao);
	PX4_INFO_RAW("\tignition_angle: %d\n", message.ignition_angle);
	PX4_INFO_RAW("\tthrottle_angle: %u\n", message.throttle_angle);
	PX4_INFO_RAW("\tignition_gap: %d\n", message.ignition_gap);
	PX4_INFO_RAW("\tinjection_angle: %u\n", message.injection_angle);
	PX4_INFO_RAW("\tinjection_time: %u\n", message.injection_time);
	PX4_INFO_RAW("\tsensor_error_flags: %u\n", message.sensor_error_flags);
	PX4_INFO_RAW("\tthermal_limit_flags: %u\n", message.thermal_limit_flags);
	PX4_INFO_RAW("\teng_supply_voltage: %u\n", message.eng_supply_voltage);
	PX4_INFO_RAW("\tgen_motor_speed: %d\n", message.gen_motor_speed);
	PX4_INFO_RAW("\tgen_current_output: %d\n", message.gen_current_output);
	PX4_INFO_RAW("\tgen_phase_current: %d\n", message.gen_phase_current);
	PX4_INFO_RAW("\tgen_supply_voltage: %u\n", message.gen_supply_voltage);
	PX4_INFO_RAW("\tgen_bridge_voltage: %u\n", message.gen_bridge_voltage);
	PX4_INFO_RAW("\tgen_battery_current: %d\n", message.gen_battery_current);
	PX4_INFO_RAW("\tgen_temp: %d\n", message.gen_temp);
	PX4_INFO_RAW("\tgen_controller_temp: %d\n", message.gen_controller_temp);
	
}
